#!/bin/bash

# Created by argbash-init v2.9.0

# ARG_OPTIONAL_SINGLE([rpi-folder],[f],[root folder for chroot],[/home/vagrant/rpi-install])
# ARG_POSITIONAL_SINGLE([command-string],[optional command to execute],[''])
# ARG_DEFAULTS_POS()
# ARG_HELP([helper script to chroot into rpi folder])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='fh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_command_string=''
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_rpi_folder="/home/vagrant/rpi-install"


print_help()
{
	printf '%s\n' "helper script to chroot into rpi folder"
	printf 'Usage: %s [-f|--rpi-folder <arg>] [-h|--help] [<command-string>]\n' "$0"
	printf '\t%s\n' "<command-string>: optional command to execute (default: '''')"
	printf '\t%s\n' "-f, --rpi-folder: root folder for chroot (default: '/home/vagrant/rpi-install')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-f|--rpi-folder)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_rpi_folder="$2"
				shift
				;;
			--rpi-folder=*)
				_arg_rpi_folder="${_key##--rpi-folder=}"
				;;
			-f*)
				_arg_rpi_folder="${_key##-f}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_command_string "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


set -eu

# [ -e /proc/sys/fs/binfmt_misc/register ] || \
echo ':aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\xb7\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-aarch64:' \
    2>/dev/null \
    > /proc/sys/fs/binfmt_misc/register || true

mount -o bind /dev "${_arg_rpi_folder}"/dev
mount -o bind /proc "${_arg_rpi_folder}"/proc
mount -o bind /sys "${_arg_rpi_folder}"/sys
mount -o rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000 devpts "${_arg_rpi_folder}"/dev/pts -t devpts

cp /etc/resolv.conf "${_arg_rpi_folder}"/etc/

RETURN=0
if [ -n "${_arg_command_string}" ]; then
    chroot "${_arg_rpi_folder}" /bin/bash -c "${_arg_command_string}" || RETURN=$?
else
    chroot "${_arg_rpi_folder}" /bin/bash --login
fi

umount "${_arg_rpi_folder}"/{proc,sys,dev/pts,dev}

exit $RETURN

# ] <-- needed because of Argbash
